package ${packageName}.model;

import android.content.ContentValues;
import android.database.Cursor;
import android.os.Parcel;
import android.os.Parcelable;

import ${packageName}.database.table.${tableClassName}Table;

import java.util.ArrayList;
import java.util.List;

#if($table.isParcelable())
public class ${tableClassName} implements Parcelable {
#else
public class ${tableClassName} {
#end
    private long mRowId;
#foreach( $field in $fields )
#if($field)
    private ${field.getJavaTypeString()} ${field.getPrivateVariableName()};
#end
#end

#if( $participatingRelationships )
#foreach( $relationship in $participatingRelationships )
#set( $foreignKey = $relationship.getForeignKeyPrivateVariableNameForTable($table) )
#if( $foreignKey )
    private Long ${foreignKey};
#end
#end
#end
    private ContentValues mValues = new ContentValues();

    public ${tableClassName}() {}

    public ${tableClassName}(final Cursor cursor) {
        this(cursor, false);
    }

    public ${tableClassName}(final Cursor cursor, boolean prependTableName) {
        String prefix = prependTableName ? ${tableClassName}Table.TABLE_NAME + "_" : "";
        setRowId(cursor.getLong(cursor.getColumnIndex(prefix + ${tableClassName}Table._ID)));
#foreach ($field in $fields)
#if($field)
#if( $field.getJavaTypeString() == "boolean" )
        set${field.getNameAsTitleCase()}(cursor.${field.getJavaTypeStringGetter()}(cursor.getColumnIndex(prefix + ${tableClassName}Table.${field.getConstantString()})) == 1);
#else
        set${field.getNameAsTitleCase()}(cursor.${field.getJavaTypeStringGetter()}(cursor.getColumnIndex(prefix + ${tableClassName}Table.${field.getConstantString()})));
#end
#end
#end

#if( $participatingRelationships )
#foreach( $relationship in $participatingRelationships )
#set( $foreignKeyTitleCase = $relationship.getForeignKeyVariableAsTitleCase($table) )
#set( $foreignKeyConstant = $relationship.getForeignKeyNameForTable($table) )
#if( $foreignKeyTitleCase && $foreignKeyConstant)
        set${foreignKeyTitleCase}(cursor.getLong(cursor.getColumnIndex(prefix + ${tableClassName}Table.${foreignKeyConstant})));
#end
#end
#end
    }

    public ContentValues getContentValues() {
        return mValues;
    }

    public Long getRowId() {
        return mRowId;
    }

    public void setRowId(long _id) {
        mRowId = _id;
        mValues.put(${tableClassName}Table._ID, _id);
    }
#foreach ($field in $fields)
#if($field)
    public void set${field.getNameAsTitleCase()}(${field.getJavaTypeString()} ${field.getFieldName()}) {
        ${field.getPrivateVariableName()} = ${field.getFieldName()};
        mValues.put(${tableClassName}Table.${field.getConstantString()}, ${field.getFieldName()});
    }

#if($table.isBuildable())
    public ${tableClassName} with${field.getNameAsTitleCase()}(${field.getJavaTypeString()} ${field.getFieldName()}) {
        set${field.getNameAsTitleCase()}(${field.getFieldName()});
        return this;
    }

#end

    public ${field.getJavaTypeString()} get${field.getNameAsTitleCase()}() {
            return ${field.getPrivateVariableName()};
    }

#end
#end
#if( $participatingRelationships )
#foreach( $relationship in $participatingRelationships )
#set( $foreignKeyTitleCase = $relationship.getForeignKeyVariableAsTitleCase($table) )
#set( $foreignKeyVariableName = $relationship.getForeignKeyVariableNameForTable($table) )
#set( $foreignKeyPrivateVariableName = $relationship.getForeignKeyPrivateVariableNameForTable($table) )
#set( $foreignKeyConstant = $relationship.getForeignKeyNameForTable($table) )
#if( $foreignKeyTitleCase )
    public void set${foreignKeyTitleCase}(Long ${foreignKeyVariableName}) {
        ${foreignKeyPrivateVariableName} = ${foreignKeyVariableName};
        mValues.put(${tableClassName}Table.${foreignKeyConstant}, ${foreignKeyVariableName});
    }

    public Long get${foreignKeyTitleCase}() {
            return ${foreignKeyPrivateVariableName};
    }
#if($table.isBuildable())

    public ${tableClassName} with${foreignKeyTitleCase}(Long ${foreignKeyVariableName}) {
        set${foreignKeyTitleCase}(${foreignKeyVariableName});
        return this;
    }
#end
#end
#end
#end
    public static List<${tableClassName}> listFromCursor(Cursor cursor) {
        List<${tableClassName}> list = new ArrayList<${tableClassName}>();

        if (cursor != null && cursor.moveToFirst()) {
            do {
                list.add(new ${tableClassName}(cursor));
            } while (cursor.moveToNext());
        }

        return list;
    }
#if($table.isParcelable())

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        dest.writeLong(this.mRowId);
#foreach( $field in $fields )
#if($field)
#if( $field.getJavaTypeString() == "boolean" )
        dest.writeByte(this.${field.getPrivateVariableName()} ? (byte) 1 : (byte) 0);
#end
#if( $field.getJavaTypeString() == "int" )
        dest.writeInt(this.${field.getPrivateVariableName()});
#end
#if( $field.getJavaTypeString() == "long" )
        dest.writeLong(this.${field.getPrivateVariableName()});
#end
#if( $field.getJavaTypeString() == "float" )
        dest.writeFloat(this.${field.getPrivateVariableName()});
#end
#if( $field.getJavaTypeString() == "double" )
        dest.writeDouble(this.${field.getPrivateVariableName()});
#end
#if( $field.getJavaTypeString() == "String" )
        dest.writeString(this.${field.getPrivateVariableName()});
#end
#end
#end
    }

    public ${tableClassName}(Parcel in) {
        setRowId(in.readLong());
#foreach( $field in $fields )
#if($field)
#if( $field.getJavaTypeString() == "boolean" )
        set${field.getNameAsTitleCase()}(in.readByte() != 0);
#end
#if( $field.getJavaTypeString() == "int" )
        set${field.getNameAsTitleCase()}(in.readInt());
#end
#if( $field.getJavaTypeString() == "long" )
        set${field.getNameAsTitleCase()}(in.readLong());
#end
#if( $field.getJavaTypeString() == "float" )
        set${field.getNameAsTitleCase()}(in.readFloat());
#end
#if( $field.getJavaTypeString() == "double" )
        set${field.getNameAsTitleCase()}(in.readDouble());
#end
#if( $field.getJavaTypeString() == "String" )
        set${field.getNameAsTitleCase()}(in.readString());
#end
#end
#end
    }

    public static final Creator<${tableClassName}> CREATOR = new Creator<${tableClassName}>() {
        public ${tableClassName} createFromParcel(Parcel source) {
            return new ${tableClassName}(source);
        }

        public ${tableClassName}[] newArray(int size) {
            return new ${tableClassName}[size];
        }
    };
#end
}